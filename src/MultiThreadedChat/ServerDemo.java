
package MultiThreadedChat;

import MultiThreadedChat.dao.ChatClientDao;
import MultiThreadedChat.dao.ChatLogDao;
import MultiThreadedChat.pojo.ChatClient;
import MultiThreadedChat.pojo.ChatLog;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author bikrant bikram
 */
public class ServerDemo extends javax.swing.JFrame {

   
   ServerSocket ss;
   PrintWriter pw1;
   SimpleDateFormat d;
   ChatLog chatLog;
   
    File f1= new File("C:\\Users\\abhishek maurya\\Desktop\\ChatThread.txt");
//    File f1= new File("C:\\Users\\abhishek maurya\\Documents\\NetBeansProjects\\RobotTestingDemo\\hello.py");
        
      

   ArrayList<PrintWriter> ap=new ArrayList<>();
   ArrayList <String> name=new ArrayList<>();
   HashMap <String ,PrintWriter> hm;
   
    public ServerDemo() {
        initComponents();
       try {
           pw1 = new PrintWriter(f1);
           d= new SimpleDateFormat("HH:mm:ss,dd-MMM-yy");
           
       } catch (FileNotFoundException ex) {
           ex.printStackTrace();
           Logger.getLogger(ServerDemo.class.getName()).log(Level.SEVERE, null, ex);
       }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtChat = new javax.swing.JTextArea();
        btnStartServer = new javax.swing.JButton();
        btnStopServer = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        txtChat.setColumns(20);
        txtChat.setRows(5);
        jScrollPane1.setViewportView(txtChat);

        btnStartServer.setText("Start Server");
        btnStartServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartServerActionPerformed(evt);
            }
        });

        btnStopServer.setText("StopServer");
        btnStopServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStopServerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(26, Short.MAX_VALUE)
                .addComponent(btnStartServer)
                .addGap(244, 244, 244)
                .addComponent(btnStopServer)
                .addContainerGap(26, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 396, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(btnStopServer)
                        .addGap(35, 35, 35))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(btnStartServer)
                        .addGap(49, 49, 49))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnStartServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartServerActionPerformed

      WaitForConnectionThread waitForConnectionThread= new WaitForConnectionThread();
       waitForConnectionThread.start();
       btnStartServer.setEnabled(false);
    }//GEN-LAST:event_btnStartServerActionPerformed

    private void btnStopServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStopServerActionPerformed
pw1.close();
System.exit(0);
       
       
    }//GEN-LAST:event_btnStopServerActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
      
        
       pw1.close(); 
        
        
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ServerDemo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ServerDemo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ServerDemo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ServerDemo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ServerDemo().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnStartServer;
    private javax.swing.JButton btnStopServer;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea txtChat;
    // End of variables declaration//GEN-END:variables

class WaitForConnectionThread extends Thread{
      Socket sc;
     
  public void run()
  {
     
   
      try {
          ss= new ServerSocket(1234);
          
          
          while(true)
          {
              sc= ss.accept();
              ChatHandelerThread chatHandelerThread= new ChatHandelerThread(sc);
              chatHandelerThread.start();
              
          }
      } catch (IOException ex) {
          Logger.getLogger(ServerDemo.class.getName()).log(Level.SEVERE, null, ex);
      }
           

    } 
  class ChatHandelerThread extends Thread
  {
      Date date;
    
      Socket sc;
      Scanner cl;
      PrintWriter pw;
      
      
           public ChatHandelerThread(Socket sc) 
           {
              this.sc=sc; 
          
           }
      public void run()
      {
          try {
              cl= new Scanner(sc.getInputStream());
              pw = new PrintWriter(sc.getOutputStream(),true);
            String n;
            int count=0;
            while(true)
            {
                if(count>0)
                {
                pw.println("NAMEALREADYEXITS");
       
                }
            
            else
            {
                 pw.println("NAMEREQUIRED");
                   
                    }
            
  
   
            n=cl.nextLine();
                  try {
                      if(!ChatClientDao.findClient(n))
                      {
                           ChatClient obj= new ChatClient(n,sc.getInetAddress().toString());
                          ChatClientDao.addClient(obj);
                          
                          //name.add(n);
                          break; 
                      }
                      else if(ChatClientDao.findPassword(sc.getInetAddress().toString()))
                          break;
                  } catch (SQLException ex) {
                     ex.printStackTrace();
                  }
            count++;
          }
            
            
            
            pw.println("NAMEACCEPTED");
            pw.println("you have logged in as "+ n);
            if(name.size()==1)
                
          
                txtChat.append("CONNNECTERD TO CLIENT..........\n");
            txtChat.append(n+"from"+sc.getInetAddress()+"\n");
            ap.add(pw);
      
            
            String msg;
            while(true)
            {
                msg=cl.nextLine();
                if(msg.equalsIgnoreCase("quit"))
                {
                    
                    pw.println("quit");
                    
                    ap.remove(pw);
                    
                    name.remove(n);
                     for(PrintWriter p:ap) 
                p.println(n+"        has been left group");
                    
                    break;
                }
                
                
               chatLog =new ChatLog() ;
              
              synchronized(chatLog){//another way of synchronizaton
                  date= new Date();
                  chatLog =new ChatLog(n,msg,d.format(date)) ;
                    try {
                        ChatLogDao.addChat(chatLog);
                    } 
                    catch (SQLException ex) {
                        ex.printStackTrace();
                        
                    }
                  
                
                
//                PrintInFile printInFile= new  PrintInFile(n+":"+msg+ "  "+d.format(date)+"\n");
       //         pw1.println(n+":"+msg+ "  "+d.format(date)+"\n");
                 pw1.println(msg);
//                printInFile.printer();
              }
            for(PrintWriter p:ap)
            {
                  
                if(!pw.equals(p))
                p.println(n+":"+msg);
                
                
             
            }
               
           
            }    
          }          
          catch (IOException ex) {
              ex.printStackTrace();
              System.out.println("error in serverdemo chat thread");
          }
          
      
      }    
  }

  
}
//class PrintInFile
//{
//
//        public PrintInFile(String msg) {
//            this.msg = msg;
//        }
//    String msg;
//    
//  synchronized public void printer()
//  {
//     pw1.append(msg+"\r\n");
//      
//  }
//    
//    
//}
}
